// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0--rc2
// source: ai_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AIService_GenerateContent_FullMethodName         = "/qingyu.ai.AIService/GenerateContent"
	AIService_QueryKnowledge_FullMethodName          = "/qingyu.ai.AIService/QueryKnowledge"
	AIService_GetContext_FullMethodName              = "/qingyu.ai.AIService/GetContext"
	AIService_ExecuteAgent_FullMethodName            = "/qingyu.ai.AIService/ExecuteAgent"
	AIService_ExecuteCreativeWorkflow_FullMethodName = "/qingyu.ai.AIService/ExecuteCreativeWorkflow"
	AIService_GenerateOutline_FullMethodName         = "/qingyu.ai.AIService/GenerateOutline"
	AIService_GenerateCharacters_FullMethodName      = "/qingyu.ai.AIService/GenerateCharacters"
	AIService_GeneratePlot_FullMethodName            = "/qingyu.ai.AIService/GeneratePlot"
	AIService_EmbedText_FullMethodName               = "/qingyu.ai.AIService/EmbedText"
	AIService_HealthCheck_FullMethodName             = "/qingyu.ai.AIService/HealthCheck"
)

// AIServiceClient is the client API for AIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AI 服务定义
type AIServiceClient interface {
	// 生成内容
	GenerateContent(ctx context.Context, in *GenerateContentRequest, opts ...grpc.CallOption) (*GenerateContentResponse, error)
	// RAG 查询
	QueryKnowledge(ctx context.Context, in *RAGQueryRequest, opts ...grpc.CallOption) (*RAGQueryResponse, error)
	// 获取上下文
	GetContext(ctx context.Context, in *ContextRequest, opts ...grpc.CallOption) (*ContextResponse, error)
	// 执行 Agent 工作流
	ExecuteAgent(ctx context.Context, in *AgentExecutionRequest, opts ...grpc.CallOption) (*AgentExecutionResponse, error)
	// Phase3: 专业Agent工作流
	ExecuteCreativeWorkflow(ctx context.Context, in *CreativeWorkflowRequest, opts ...grpc.CallOption) (*CreativeWorkflowResponse, error)
	// Phase3: 生成大纲
	GenerateOutline(ctx context.Context, in *OutlineRequest, opts ...grpc.CallOption) (*OutlineResponse, error)
	// Phase3: 生成角色
	GenerateCharacters(ctx context.Context, in *CharactersRequest, opts ...grpc.CallOption) (*CharactersResponse, error)
	// Phase3: 生成情节
	GeneratePlot(ctx context.Context, in *PlotRequest, opts ...grpc.CallOption) (*PlotResponse, error)
	// 向量化文本
	EmbedText(ctx context.Context, in *EmbedRequest, opts ...grpc.CallOption) (*EmbedResponse, error)
	// 健康检查
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type aIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAIServiceClient(cc grpc.ClientConnInterface) AIServiceClient {
	return &aIServiceClient{cc}
}

func (c *aIServiceClient) GenerateContent(ctx context.Context, in *GenerateContentRequest, opts ...grpc.CallOption) (*GenerateContentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateContentResponse)
	err := c.cc.Invoke(ctx, AIService_GenerateContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) QueryKnowledge(ctx context.Context, in *RAGQueryRequest, opts ...grpc.CallOption) (*RAGQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RAGQueryResponse)
	err := c.cc.Invoke(ctx, AIService_QueryKnowledge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) GetContext(ctx context.Context, in *ContextRequest, opts ...grpc.CallOption) (*ContextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContextResponse)
	err := c.cc.Invoke(ctx, AIService_GetContext_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) ExecuteAgent(ctx context.Context, in *AgentExecutionRequest, opts ...grpc.CallOption) (*AgentExecutionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentExecutionResponse)
	err := c.cc.Invoke(ctx, AIService_ExecuteAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) ExecuteCreativeWorkflow(ctx context.Context, in *CreativeWorkflowRequest, opts ...grpc.CallOption) (*CreativeWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreativeWorkflowResponse)
	err := c.cc.Invoke(ctx, AIService_ExecuteCreativeWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) GenerateOutline(ctx context.Context, in *OutlineRequest, opts ...grpc.CallOption) (*OutlineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OutlineResponse)
	err := c.cc.Invoke(ctx, AIService_GenerateOutline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) GenerateCharacters(ctx context.Context, in *CharactersRequest, opts ...grpc.CallOption) (*CharactersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CharactersResponse)
	err := c.cc.Invoke(ctx, AIService_GenerateCharacters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) GeneratePlot(ctx context.Context, in *PlotRequest, opts ...grpc.CallOption) (*PlotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlotResponse)
	err := c.cc.Invoke(ctx, AIService_GeneratePlot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) EmbedText(ctx context.Context, in *EmbedRequest, opts ...grpc.CallOption) (*EmbedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmbedResponse)
	err := c.cc.Invoke(ctx, AIService_EmbedText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, AIService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AIServiceServer is the server API for AIService service.
// All implementations must embed UnimplementedAIServiceServer
// for forward compatibility.
//
// AI 服务定义
type AIServiceServer interface {
	// 生成内容
	GenerateContent(context.Context, *GenerateContentRequest) (*GenerateContentResponse, error)
	// RAG 查询
	QueryKnowledge(context.Context, *RAGQueryRequest) (*RAGQueryResponse, error)
	// 获取上下文
	GetContext(context.Context, *ContextRequest) (*ContextResponse, error)
	// 执行 Agent 工作流
	ExecuteAgent(context.Context, *AgentExecutionRequest) (*AgentExecutionResponse, error)
	// Phase3: 专业Agent工作流
	ExecuteCreativeWorkflow(context.Context, *CreativeWorkflowRequest) (*CreativeWorkflowResponse, error)
	// Phase3: 生成大纲
	GenerateOutline(context.Context, *OutlineRequest) (*OutlineResponse, error)
	// Phase3: 生成角色
	GenerateCharacters(context.Context, *CharactersRequest) (*CharactersResponse, error)
	// Phase3: 生成情节
	GeneratePlot(context.Context, *PlotRequest) (*PlotResponse, error)
	// 向量化文本
	EmbedText(context.Context, *EmbedRequest) (*EmbedResponse, error)
	// 健康检查
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedAIServiceServer()
}

// UnimplementedAIServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAIServiceServer struct{}

func (UnimplementedAIServiceServer) GenerateContent(context.Context, *GenerateContentRequest) (*GenerateContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateContent not implemented")
}
func (UnimplementedAIServiceServer) QueryKnowledge(context.Context, *RAGQueryRequest) (*RAGQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryKnowledge not implemented")
}
func (UnimplementedAIServiceServer) GetContext(context.Context, *ContextRequest) (*ContextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContext not implemented")
}
func (UnimplementedAIServiceServer) ExecuteAgent(context.Context, *AgentExecutionRequest) (*AgentExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAgent not implemented")
}
func (UnimplementedAIServiceServer) ExecuteCreativeWorkflow(context.Context, *CreativeWorkflowRequest) (*CreativeWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteCreativeWorkflow not implemented")
}
func (UnimplementedAIServiceServer) GenerateOutline(context.Context, *OutlineRequest) (*OutlineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateOutline not implemented")
}
func (UnimplementedAIServiceServer) GenerateCharacters(context.Context, *CharactersRequest) (*CharactersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateCharacters not implemented")
}
func (UnimplementedAIServiceServer) GeneratePlot(context.Context, *PlotRequest) (*PlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeneratePlot not implemented")
}
func (UnimplementedAIServiceServer) EmbedText(context.Context, *EmbedRequest) (*EmbedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmbedText not implemented")
}
func (UnimplementedAIServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedAIServiceServer) mustEmbedUnimplementedAIServiceServer() {}
func (UnimplementedAIServiceServer) testEmbeddedByValue()                   {}

// UnsafeAIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AIServiceServer will
// result in compilation errors.
type UnsafeAIServiceServer interface {
	mustEmbedUnimplementedAIServiceServer()
}

func RegisterAIServiceServer(s grpc.ServiceRegistrar, srv AIServiceServer) {
	// If the following call pancis, it indicates UnimplementedAIServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AIService_ServiceDesc, srv)
}

func _AIService_GenerateContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).GenerateContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_GenerateContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).GenerateContent(ctx, req.(*GenerateContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_QueryKnowledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RAGQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).QueryKnowledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_QueryKnowledge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).QueryKnowledge(ctx, req.(*RAGQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_GetContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).GetContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_GetContext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).GetContext(ctx, req.(*ContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_ExecuteAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).ExecuteAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_ExecuteAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).ExecuteAgent(ctx, req.(*AgentExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_ExecuteCreativeWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreativeWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).ExecuteCreativeWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_ExecuteCreativeWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).ExecuteCreativeWorkflow(ctx, req.(*CreativeWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_GenerateOutline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutlineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).GenerateOutline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_GenerateOutline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).GenerateOutline(ctx, req.(*OutlineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_GenerateCharacters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharactersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).GenerateCharacters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_GenerateCharacters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).GenerateCharacters(ctx, req.(*CharactersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_GeneratePlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).GeneratePlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_GeneratePlot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).GeneratePlot(ctx, req.(*PlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_EmbedText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmbedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).EmbedText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_EmbedText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).EmbedText(ctx, req.(*EmbedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AIService_ServiceDesc is the grpc.ServiceDesc for AIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qingyu.ai.AIService",
	HandlerType: (*AIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateContent",
			Handler:    _AIService_GenerateContent_Handler,
		},
		{
			MethodName: "QueryKnowledge",
			Handler:    _AIService_QueryKnowledge_Handler,
		},
		{
			MethodName: "GetContext",
			Handler:    _AIService_GetContext_Handler,
		},
		{
			MethodName: "ExecuteAgent",
			Handler:    _AIService_ExecuteAgent_Handler,
		},
		{
			MethodName: "ExecuteCreativeWorkflow",
			Handler:    _AIService_ExecuteCreativeWorkflow_Handler,
		},
		{
			MethodName: "GenerateOutline",
			Handler:    _AIService_GenerateOutline_Handler,
		},
		{
			MethodName: "GenerateCharacters",
			Handler:    _AIService_GenerateCharacters_Handler,
		},
		{
			MethodName: "GeneratePlot",
			Handler:    _AIService_GeneratePlot_Handler,
		},
		{
			MethodName: "EmbedText",
			Handler:    _AIService_EmbedText_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _AIService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ai_service.proto",
}
