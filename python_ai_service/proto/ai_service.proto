syntax = "proto3";

package qingyu.ai;

option go_package = "Qingyu_backend/pkg/grpc/pb";

// AI 服务定义
service AIService {
  // 生成内容
  rpc GenerateContent(GenerateContentRequest) returns (GenerateContentResponse);

  // RAG 查询
  rpc QueryKnowledge(RAGQueryRequest) returns (RAGQueryResponse);

  // 获取上下文
  rpc GetContext(ContextRequest) returns (ContextResponse);

  // 执行 Agent 工作流
  rpc ExecuteAgent(AgentExecutionRequest) returns (AgentExecutionResponse);

  // Phase3: 专业Agent工作流
  rpc ExecuteCreativeWorkflow(CreativeWorkflowRequest) returns (CreativeWorkflowResponse);

  // Phase3: 生成大纲
  rpc GenerateOutline(OutlineRequest) returns (OutlineResponse);

  // Phase3: 生成角色
  rpc GenerateCharacters(CharactersRequest) returns (CharactersResponse);

  // Phase3: 生成情节
  rpc GeneratePlot(PlotRequest) returns (PlotResponse);

  // 向量化文本
  rpc EmbedText(EmbedRequest) returns (EmbedResponse);

  // 健康检查
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}

// ============ 生成内容 ============

message GenerateContentRequest {
  string project_id = 1;
  string chapter_id = 2;
  string prompt = 3;
  GenerateOptions options = 4;
}

message GenerateOptions {
  string model = 1;           // 模型名称
  int32 max_tokens = 2;       // 最大 Token 数
  float temperature = 3;      // 温度参数 0.0-1.0
  repeated string stop = 4;   // 停止词
  bool stream = 5;            // 是否流式输出
}

message GenerateContentResponse {
  string content = 1;
  int32 tokens_used = 2;
  string model = 3;
  int64 generated_at = 4;  // Unix timestamp
}

// ============ RAG 查询 ============

message RAGQueryRequest {
  string query = 1;
  string project_id = 2;
  RAGFilters filters = 3;
  int32 top_k = 4;  // 返回结果数量
}

message RAGFilters {
  repeated string doc_types = 1;      // 文档类型过滤
  repeated string character_ids = 2;  // 角色 ID 过滤
  repeated string timeline_ids = 3;   // 时间线 ID 过滤
  repeated string chapter_ids = 4;    // 章节 ID 过滤
}

message RAGQueryResponse {
  repeated RAGResult results = 1;
  int32 total = 2;
}

message RAGResult {
  string id = 1;
  string content = 2;
  float score = 3;
  string doc_type = 4;
  map<string, string> metadata = 5;
}

// ============ 上下文获取 ============

message ContextRequest {
  string project_id = 1;
  string chapter_id = 2;
  string task_type = 3;  // continue_writing, create_chapter, review_content
}

message ContextResponse {
  string task_type = 1;
  WorkspaceContext context = 2;
  int32 token_count = 3;
}

message WorkspaceContext {
  repeated ChapterSummary previous_chapters = 1;
  repeated CharacterInfo active_characters = 2;
  repeated TimelineEvent timeline_events = 3;
  repeated OutlineNode outline_nodes = 4;
  WorldSettings world_settings = 5;
}

message ChapterSummary {
  string id = 1;
  string title = 2;
  string summary = 3;
  int32 order = 4;
}

message CharacterInfo {
  string id = 1;
  string name = 2;
  repeated string alias = 3;
  string summary = 4;
  repeated string traits = 5;
  string background = 6;
}

message TimelineEvent {
  string id = 1;
  string title = 2;
  string description = 3;
  string impact = 4;
  repeated string participants = 5;
}

message OutlineNode {
  string id = 1;
  string title = 2;
  string description = 3;
  int32 level = 4;
}

message WorldSettings {
  string id = 1;
  string name = 2;
  string description = 3;
  map<string, string> settings = 4;
}

// ============ Agent 执行 ============

message AgentExecutionRequest {
  string workflow_type = 1;  // a2a_pipeline, outline_generation, etc.
  string project_id = 2;
  map<string, string> parameters = 3;
}

message AgentExecutionResponse {
  string execution_id = 1;
  string status = 2;  // running, completed, failed
  string result = 3;  // JSON 格式的结果
  repeated string errors = 4;
  int32 tokens_used = 5;
}

// ============ 向量化 ============

message EmbedRequest {
  repeated string texts = 1;
  string model = 2;
}

message EmbedResponse {
  repeated Embedding embeddings = 1;
}

message Embedding {
  repeated float vector = 1;
  int32 dimension = 2;
}

// ============ Phase3: 创作工作流 ============

message CreativeWorkflowRequest {
  string task = 1;
  string user_id = 2;
  string project_id = 3;
  int32 max_reflections = 4;  // 最大反思次数，默认3
  bool enable_human_review = 5;  // 是否启用人工审核
  map<string, string> workspace_context = 6;  // 可选的工作区上下文
}

message CreativeWorkflowResponse {
  string execution_id = 1;
  bool review_passed = 2;
  int32 reflection_count = 3;
  OutlineData outline = 4;
  CharactersData characters = 5;
  PlotData plot = 6;
  DiagnosticReportData diagnostic_report = 7;
  repeated string reasoning = 8;
  map<string, float> execution_times = 9;
  int32 tokens_used = 10;
}

// ============ Phase3: 大纲生成 ============

message OutlineRequest {
  string task = 1;
  string user_id = 2;
  string project_id = 3;
  map<string, string> workspace_context = 4;
  string correction_prompt = 5;  // 可选的修正提示
}

message OutlineResponse {
  OutlineData outline = 1;
  float execution_time = 2;
}

message OutlineData {
  string title = 1;
  string genre = 2;
  string core_theme = 3;
  string target_audience = 4;
  int32 estimated_total_words = 5;
  repeated ChapterData chapters = 6;
  StoryArc story_arc = 7;
}

message ChapterData {
  int32 chapter_id = 1;
  string title = 2;
  string summary = 3;
  repeated string key_events = 4;
  repeated string characters_involved = 5;
  string conflict_type = 6;
  string emotional_tone = 7;
  int32 estimated_word_count = 8;
  string chapter_goal = 9;
  string cliffhanger = 10;
}

message StoryArc {
  repeated int32 setup = 1;
  repeated int32 rising_action = 2;
  repeated int32 climax = 3;
  repeated int32 falling_action = 4;
  repeated int32 resolution = 5;
}

// ============ Phase3: 角色生成 ============

message CharactersRequest {
  string task = 1;
  string user_id = 2;
  string project_id = 3;
  OutlineData outline = 4;  // 大纲信息
  map<string, string> workspace_context = 5;
  string correction_prompt = 6;
}

message CharactersResponse {
  CharactersData characters = 1;
  float execution_time = 2;
}

message CharactersData {
  repeated CharacterData characters = 1;
  RelationshipNetwork relationship_network = 2;
}

message CharacterData {
  string character_id = 1;
  string name = 2;
  string role_type = 3;  // protagonist, antagonist, supporting
  string importance = 4;  // major, minor
  int32 age = 5;
  string gender = 6;
  string appearance = 7;
  PersonalityData personality = 8;
  BackgroundData background = 9;
  string motivation = 10;
  repeated RelationshipData relationships = 11;
  DevelopmentArc development_arc = 12;
  string role_in_story = 13;
  int32 first_appearance = 14;
  repeated int32 chapters_involved = 15;
}

message PersonalityData {
  repeated string traits = 1;
  repeated string strengths = 2;
  repeated string weaknesses = 3;
  string core_values = 4;
  string fears = 5;
}

message BackgroundData {
  string summary = 1;
  string family = 2;
  string education = 3;
  repeated string key_experiences = 4;
}

message RelationshipData {
  string character = 1;
  string relation_type = 2;  // friend, enemy, family, mentor, rival
  string description = 3;
  string dynamics = 4;
}

message DevelopmentArc {
  string starting_point = 1;
  repeated string turning_points = 2;
  string ending_point = 3;
  string growth_theme = 4;
}

message RelationshipNetwork {
  repeated Alliance alliances = 1;
  repeated Conflict conflicts = 2;
  repeated Mentorship mentorships = 3;
}

message Alliance {
  repeated string members = 1;
}

message Conflict {
  repeated string parties = 1;
}

message Mentorship {
  string mentor = 1;
  string student = 2;
}

// ============ Phase3: 情节生成 ============

message PlotRequest {
  string task = 1;
  string user_id = 2;
  string project_id = 3;
  OutlineData outline = 4;
  CharactersData characters = 5;
  map<string, string> workspace_context = 6;
  string correction_prompt = 7;
}

message PlotResponse {
  PlotData plot = 1;
  float execution_time = 2;
}

message PlotData {
  repeated TimelineEventData timeline_events = 1;
  repeated PlotThread plot_threads = 2;
  repeated ConflictData conflicts = 3;
  KeyPlotPoints key_plot_points = 4;
}

message TimelineEventData {
  string event_id = 1;
  string timestamp = 2;
  string location = 3;
  string title = 4;
  string description = 5;
  repeated string participants = 6;
  string event_type = 7;  // 冲突/转折/高潮/铺垫/结局
  EventImpact impact = 8;
  repeated string causes = 9;
  repeated string consequences = 10;
  int32 chapter_id = 11;
}

message EventImpact {
  string on_plot = 1;
  map<string, string> on_characters = 2;
  string emotional_impact = 3;
}

message PlotThread {
  string thread_id = 1;
  string title = 2;
  string description = 3;
  string type = 4;  // main, subplot
  repeated string events = 5;
  string starting_event = 6;
  string climax_event = 7;
  string resolution_event = 8;
  repeated string characters_involved = 9;
}

message ConflictData {
  string conflict_id = 1;
  string type = 2;  // 人物冲突/内心冲突/环境冲突
  repeated string parties = 3;
  string description = 4;
  repeated string escalation_events = 5;
  string resolution_event = 6;
}

message KeyPlotPoints {
  string inciting_incident = 1;
  string plot_point_1 = 2;
  string midpoint = 3;
  string plot_point_2 = 4;
  string climax = 5;
  string resolution = 6;
}

// ============ Phase3: 诊断报告 ============

message DiagnosticReportData {
  bool passed = 1;
  int32 quality_score = 2;
  repeated DiagnosticIssue issues = 3;
  string correction_strategy = 4;
  repeated string affected_agents = 5;
  repeated string reasoning_chain = 6;
}

message DiagnosticIssue {
  string id = 1;
  string severity = 2;
  string category = 3;
  string sub_category = 4;
  string title = 5;
  string description = 6;
  string root_cause = 7;
  repeated string affected_entities = 8;
  string impact = 9;
}

// ============ 健康检查 ============

message HealthCheckRequest {}

message HealthCheckResponse {
  string status = 1;  // healthy, degraded, unhealthy
  map<string, string> checks = 2;
}

