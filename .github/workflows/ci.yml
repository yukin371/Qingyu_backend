name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  GO_VERSION: '1.21'
  MONGODB_VERSION: '6.0'

jobs:
  # 代码质量检查
  lint:
    name: Lint Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=5m --config=.golangci.yml

  # 单元测试
  test:
    name: Unit Tests
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Wait for MongoDB
        run: |
          for i in {1..30}; do
            if mongosh --host localhost:27017 --username admin --password password --eval "db.adminCommand('ping')" > /dev/null 2>&1; then
              echo "MongoDB is ready"
              break
            fi
            echo "Waiting for MongoDB... ($i/30)"
            sleep 2
          done

      - name: Create test config
        run: |
          cat > config/config.test.yaml << EOF
          server:
            port: ":8080"
            mode: test

          mongodb:
            uri: "mongodb://admin:password@localhost:27017"
            database: "qingyu_test"
            timeout: 30

          redis:
            addr: "localhost:6379"
            password: ""
            db: 0

          jwt:
            secret: "test-secret-key-for-ci"
            expire: 7200
          EOF

      - name: Run tests with coverage
        run: |
          go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
        env:
          CONFIG_PATH: config/config.test.yaml
          TEST_MONGODB_URI: mongodb://admin:password@localhost:27017
          TEST_REDIS_ADDR: localhost:6379

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.txt
          flags: unittests
          name: codecov-umbrella
          token: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true

      - name: Generate coverage report
        run: |
          go tool cover -html=coverage.txt -o coverage.html

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.html

  # 集成测试
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test]

    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: go mod download

      - name: Run integration tests
        run: |
          go test -v -tags=integration ./test/integration/...
        env:
          TEST_MONGODB_URI: mongodb://admin:password@localhost:27017
          TEST_REDIS_ADDR: localhost:6379

  # 构建测试
  build:
    name: Build Test
    runs-on: ubuntu-latest
    needs: [lint, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build application
        run: |
          go build -v -o qingyu_backend ./cmd/server/main.go

      - name: Build migrations
        run: |
          go build -v -o qingyu_migrate ./cmd/migrate/main.go

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            qingyu_backend
            qingyu_migrate

  # 安全扫描
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: '-no-fail -fmt sarif -out results.sarif ./...'

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: results.sarif

  # 代码质量分析
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取完整历史用于SonarQube分析

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run gocyclo (Cyclomatic Complexity)
        run: |
          go install github.com/fzipp/gocyclo/cmd/gocyclo@latest
          gocyclo -over 15 . || true

      - name: Run gocognit (Cognitive Complexity)
        run: |
          go install github.com/uudashr/gocognit/cmd/gocognit@latest
          gocognit -over 15 . || true

      - name: Check code formatting
        run: |
          # 排除 vendor 目录
          UNFORMATTED=$(gofmt -s -l $(find . -type f -name '*.go' -not -path "./vendor/*"))
          if [ -n "$UNFORMATTED" ]; then
            echo "❌ Code is not formatted. Please run 'go fmt ./...'"
            echo "Unformatted files:"
            echo "$UNFORMATTED"
            # 不在 CI 中自动退出，仅警告
            echo "::warning::Code formatting issues found"
          else
            echo "✅ Code formatting check passed"
          fi

  # 性能测试
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run benchmarks
        run: |
          go test -bench=. -benchmem -run=^$ ./... > benchmark.txt 2>&1
          cat benchmark.txt

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark.txt

  # Docker构建测试
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/Dockerfile.prod
          push: false
          tags: qingyu-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 部署到测试环境（仅dev分支）
  deploy-dev:
    name: Deploy to Dev
    runs-on: ubuntu-latest
    needs: [test, integration-test, build, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy notification
        run: |
          echo "🚀 Deploying to development environment..."
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"

      # TODO: 添加实际的部署步骤
      # - name: Deploy to dev server
      #   run: |
      #     # 部署脚本

  # 生成测试报告
  report:
    name: Generate Report
    runs-on: ubuntu-latest
    needs: [test, integration-test, security, code-quality]
    if: always()

    steps:
      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
        continue-on-error: true

      - name: Generate summary
        run: |
          echo "## CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Author**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- Lint: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Integration Tests: ${{ needs.integration-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scan: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Code Quality: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY

