name: Simple CI

on:
  push:
    branches: [ main, dev, develop ]
  pull_request:
    branches: [ main, dev, develop ]

env:
  GO_VERSION: '1.21'

jobs:
  # 代码检查和格式化
  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2

      - name: Run golangci-lint
        run: golangci-lint run --timeout=10m

      - name: Check code formatting
        run: |
          if [ -n "$(gofmt -l .)" ]; then
            echo "Go code is not formatted:"
            gofmt -d .
            exit 1
          fi

  # 安全扫描
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install gosec
        run: go install github.com/securego/gosec/v2/cmd/gosec@latest

      - name: Run gosec
        run: gosec ./...
        continue-on-error: true

  # 单元测试（不需要 MongoDB）
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download dependencies
        run: go mod download

      - name: Run unit tests
        run: |
          go test -v -race -short -coverprofile=coverage.txt -covermode=atomic \
            $(go list ./... | grep -v /test/)

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.txt
          flags: unittests
        continue-on-error: true

  # 集成测试（需要 MongoDB）
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ping: 1})' --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
          --health-start-period 40s

    env:
      MONGODB_URI: mongodb://admin:password@localhost:27017
      MONGODB_DATABASE: qingyu_test
      ENVIRONMENT: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Wait for MongoDB
        run: |
          timeout 90 bash -c 'until mongosh --host localhost:27017 \
            -u admin -p password --eval "db.adminCommand({ping: 1})" --quiet; \
            do sleep 3; done'

      - name: Download dependencies
        run: go mod download

      - name: Run integration tests
        run: |
          go test -v -race -timeout 10m \
            ./test/integration/...
        continue-on-error: false

  # API 测试
  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ping: 1})' --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
          --health-start-period 40s

    env:
      MONGODB_URI: mongodb://admin:password@localhost:27017
      MONGODB_DATABASE: qingyu_test
      ENVIRONMENT: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Wait for MongoDB
        run: |
          timeout 90 bash -c 'until mongosh --host localhost:27017 \
            -u admin -p password --eval "db.adminCommand({ping: 1})" --quiet; \
            do sleep 3; done'

      - name: Download dependencies
        run: go mod download

      - name: Run API tests
        run: |
          go test -v -race -timeout 10m \
            ./test/api/...
        continue-on-error: false

  # 依赖检查
  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@latest

      - name: Check for vulnerabilities
        run: govulncheck ./...
        continue-on-error: true

      - name: Verify dependencies
        run: |
          go mod verify
          go mod tidy
          git diff --exit-code go.mod go.sum

  # 所有检查通过
  all-checks-passed:
    name: All Checks Passed
    needs: [lint, security, unit-tests, integration-tests, api-tests, dependency-check]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          if [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.security.result }}" != "success" ] || \
             [ "${{ needs.unit-tests.result }}" != "success" ] || \
             [ "${{ needs.integration-tests.result }}" != "success" ] || \
             [ "${{ needs.api-tests.result }}" != "success" ] || \
             [ "${{ needs.dependency-check.result }}" != "success" ]; then
            echo "One or more checks failed"
            exit 1
          fi
          echo "All checks passed successfully!"

